package Аннотации_Рефлексия;
//Аннотации являются метаданными (данными о данных).
//Их функция передавать инструкции: 1) Компилятору 2) Анализатору исходного кода 2) Фреймворку или моему приложению (с по
//мощью рефлексии). Аннотации бывают встроенные (@Override-позволяет переопределять метод без ошибок в синтаксисе;
//@Deprecated-указывает на то что метод устарел (при вызове метода с этой аннотацией он будет зачеркнут);@SuppressWarnings-
//позволяет подавлять исключения которые генерирует метод) и созданные. Аннотации могут применятся ко всему (пишутся сверху)
//к классу, переменной, методу и т.д.
//С помощью рефлексии можно прочитать код, извлечь из него аннотации и на основании этих аанотаций что-либо сделать.
//Существуют аннотации аннотрующие аннотации:
//@Target-указывает к чему может быть применена аннотация (FIELD,METHOD,TYPE(класс,интерфейс,перечисление)
//@Retention-до какого этапа компилирования аннотация видна: SOURCE-отбрасывается при компиляции, CLASS-сохраняются в
// байт-коде, но недоступны во время работы программы, RUNTIME-сохраняются в байт-коде и доступны во время работы
// программы (с помошью рефлексии)

public class Annotation1 {
    @MethodInfo(author = "Ivan",dateOfCreation = 2019,purpose ="Print Hello World ")//значение author можно не писать т.к
    //мы задали его по умолчанию
    public void printHelloWorld(){
        System.out.println("Hello world");
    }
}
