package Многопоточность;
//ключевое слово synchronized используется когда два потока записывают в одну переменную
public class TreadSynchronized {
    private int counter;//переменная которую делят два потока

    public static void main(String[] args) throws InterruptedException {
        TreadSynchronized x = new TreadSynchronized();
        x.doWork();//метод doWork() не статический поэтому ему нужен объект класса для вызова
    }

    public synchronized void increment() {//ключевое слово synchronized используется толдько в сигнатуре метода и говор-
        //ит о том что тело метода может исполняться только одним потоком, а все остальные потоки ждут. Таким образом
        //в теле метода мы можем использовать не атомарные опрации (убераем состояние гонки потоков race condition при
        //котором метод используемый в двух и более потоках для записи переменной может давать некорректный результат-
        // оба потка используют одно значение переменной,1-ый вырывается вперед делая множество итераций и увеличивая
        //значение переменной, потом запускается 2-ой и перезаписывает значение перемнной на то что было в начале)
        //У каждого объекта существует монитор. Этот монитор может быть только у одного потока. Этот монитор неявным об-
        //разом используется в ключевом слове synchronized. Если мы не указываем объект для этого ключевого слова мы
        //синхронизируемся на объекте this (в нашем случае x)
        counter++;
    }


    public void doWork() throws InterruptedException {
        Thread thrread1 = new Thread(new Runnable() {//3-ий способ создания потока при помощи анонимного класса
            @Override
            public void run() {
                for (int i = 0; i < 10000; i++)
                    increment();//метод делает три операции: increment=increment+1 (считывает значение сущ. increment,
                //прибавляет к нему единицу, присваивает новое значение переменной increment) таким образом эта опера-
                //ция не атомарна.
            }
        });
        Thread thrread2 = new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = 0; i < 10000; i++)
                    increment();
            }
        });
        thrread1.start();
        thrread2.start();

        thrread1.join();//ждем выполнения наших потоков до завершения основоного потока main при этом main останавливается
        thrread2.join();//в текущем потоке(main) ждем завершения работы потока thrread2
        System.out.println(counter);//усли не использовать join() может вывести даже ноль (два наших потока не отработа-
        //ли, арезультат уже вывелся на печать)
    }
}




